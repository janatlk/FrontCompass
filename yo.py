# megacom =["""
# 0555508782
# 0 с
# Бесплатно
# 0555513853
# 0 с
# Бесплатно
# 0555513854
# 0 с
# Бесплатно
# 0555513857
# 0 с
# Бесплатно
# 0555513862
# 0 с
# Бесплатно
# 0555513865
# 0 с
# Бесплатно
# 0555513883
# 0 с
# Бесплатно
# 0555513889
# 0 с

# + 996 503007100
# VIP - 5000 с

# + 996 507999933
# VIP - 5000 с

# + 996 503779944
# SILVER - 175 с

# + 996 704911222
# SILVER - 175 с

# + 996 709297000
# GOLD - 1500 с

# + 996 706763000
# GOLD - 1500 с

# + 996 703692881
# STANDARD - 25 с

# + 996 709529864
# STANDARD - 25 с

# + 996 505000503
# VIP - 5000 с

# + 996 704690000
# VIP - 5000 с

# + 996 704004002
# VIP - 5000 с

# + 996 709002400
# VIP - 5000 с

# + 996 503555577
# VIP - 5000 с

# + 996 706003007
# VIP - 5000 с

# + 996 502333383"""]






# import re


# megacom_codes = ['555','507','503']
# O_codes = ['709','704']

# def filter_numbers(str_):
#     pattern = r'\+?\d{1,4}\s?\d{6,12}'
#     matches = re.findall(pattern, str_)
    
#     return matches



# def return_3digits(number):
#     number = number.strip()
#     if number.startswith('0'):
#         return number[1:4]
#     elif number.startswith('996'):
#         return number[4:7]
#     return None


# def check_megacom_codes(lst=list):
#     megacoms = []
#     for i in lst:
#         if i in megacom_codes:
#             megacoms.append(lst.index(i))
#             lst.pop()
#     return megacoms

# def check_o_codes(lst):
#     Os = []
#     for idx, code in enumerate(O_codes):
#         if code in str_:
#             Os.append(idx)
#     return Os



# filtered_numbers = filter_numbers(megacom[0])
# only3digits = []
# for i in filtered_numbers:
#     only3digits.append(return_3digits(i))
# megacom2 = [check_megacom_codes(only3digits)]

# print(megacom2)



import re

comments = [
"1. Отличная еда и приятная атмосфера! \ Блюда были восхитительными, а обслуживание — быстрым и внимательным. Обязательно вернёмся снова!",
"2. Невероятный сервис! \
Персонал был очень дружелюбным и услужливым. Повар учёл все наши предпочтения. 5/5!",
"3. Самая вкусная паста в городе! \
Никогда не пробовала настолько свежие ингредиенты и такую невероятную подачу. Очень довольны!",
"4. Чистота и уют на высшем уровне \
Очень уютное место с современным интерьером. Здесь приятно проводить время за вкусной едой.",
"5. Идеальное место для семейного ужина \
Отличное меню для детей, разнообразие блюд и вкуснейшие десерты! Дети были в восторге.",
"1. Очень долгое ожидание \
Ждали свои блюда больше часа, хотя в ресторане было не так много посетителей. Очень разочарованы.",
"2. Неудобное бронирование \
Пытались забронировать столик по телефону, но никто не отвечал. В итоге пришли и не было свободных мест.",
"3. Завышенные цены \
Еда была неплохая, но цена совершенно не соответствует качеству. Можно найти аналогичные блюда дешевле."
"4. Холодная еда \
Когда наконец-то принесли заказ, еда была почти холодной. Возвращать не стали, но впечатление испорчено.",
"5. Неудобные сиденья и тесно \
Столы стоят очень близко друг к другу, неудобно сидеть и не хватает места. Атмосфера была напряжённой.",
]


positive_keywords = [
        'отличная', 'восхитительная', 'прекрасная', 'дружелюбный', 'вкусная',
        'свежие', 'восторг', 'удобное', 'уютное', 'идеальное', 'восхищение'
    ]
negative_keywords = [
        'долго', 'разочарованы', 'неудобное', 'завышенные', 'холодная',
        'тесно', 'напряжённой', 'не отвечает', 'не соответствует'
    ]

def classify_comments(comments):
    positives = []
    negatives = []
    for i in comments:
        if i.lower().split() in positive_keywords:
            positives.append(i)
        elif i.lower().split() in negative_keywords:
            negatives.append(i)
    return positives, negatives


print(classify_comments(comments=comments))